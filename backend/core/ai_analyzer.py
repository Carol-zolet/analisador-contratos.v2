import os
import google.generativeai as genai
from dotenv import load_dotenv

load_dotenv()

PROMPT_IA = """
Voc√™ √© um advogado especialista em contratos de loca√ß√£o comercial. Analise o contrato abaixo protegendo o LOCAT√ÅRIO, utilizando uma abordagem baseada em regras e melhores pr√°ticas do direito imobili√°rio.

**TEXTO DO CONTRATO:**
{texto}

**ESTRUTURA DA AN√ÅLISE (DETALHADA E ORIENTADA POR REGRAS):**

## üìä RESUMO EXECUTIVO
- Avalia√ß√£o geral do contrato em 2-3 linhas
- **N√≠vel de risco geral:** CR√çTICO / ALTO / M√âDIO / BAIXO
- **Recomenda√ß√£o principal:** [a√ß√£o objetiva]

## ‚öñÔ∏è AN√ÅLISE POR REGRAS ESSENCIAIS
Avalie cada item abaixo, indicando se est√° presente, ausente, ou inadequado. Justifique brevemente e aponte riscos e sugest√µes:
- **Cl√°usula de rescis√£o**
- **Multas e penalidades**
- **Reajuste de aluguel**
- **Garantias locat√≠cias** (cau√ß√£o, fiador, seguro)
- **Direito de renova√ß√£o**
- **Responsabilidade por benfeitorias**
- **Despesas ordin√°rias e extraordin√°rias**
- **Prazo contratual**
- **Cl√°usula de exclusividade**
- **Foro para resolu√ß√£o de conflitos**

## ‚ö†Ô∏è RISCOS CR√çTICOS E PONTOS DE ATEN√á√ÉO
Liste at√© 7 riscos ou pontos de aten√ß√£o, cada um com:
- **[N√çVEL]** T√≠tulo do Risco (P√°gina X, se poss√≠vel)
    - **Descri√ß√£o:** Explique o risco em 1-2 linhas
    - **Impacto:** Consequ√™ncias pr√°ticas para o locat√°rio
    - **Solu√ß√£o/Recomenda√ß√£o:** O que pode ser feito para mitigar

## üéØ A√á√ïES RECOMENDADAS
Liste 5-7 a√ß√µes priorit√°rias e pr√°ticas que o locat√°rio deve tomar antes de assinar o contrato.

## üìö FUNDAMENTA√á√ÉO LEGAL
Se poss√≠vel, cite os principais artigos da Lei do Inquilinato (Lei 8.245/91) ou outras normas aplic√°veis para cada ponto relevante.

**IMPORTANTE:**
- Seja direto, use **negrito** para destacar pontos-chave
- Estruture a resposta em t√≥picos claros
- Use linguagem acess√≠vel, sem juridiqu√™s excessivo
- Limite a resposta a no m√°ximo 1200 palavras
"""

def configurar_api_gemini():
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key: return False
    try:
        genai.configure(api_key=api_key)
        return True
    except Exception: return False

def analisar_contrato_com_ia(texto: str) -> str:
    if not configurar_api_gemini():
        return "‚ùå **Erro:** A chave da API do Gemini n√£o foi configurada."
    try:
        model = genai.GenerativeModel("gemini-2.5-flash")
        resposta = model.generate_content(PROMPT_IA.format(texto=texto))
        return resposta.text
    except Exception as e:
        return f"‚ùå **Erro na an√°lise com Gemini:** {e}"